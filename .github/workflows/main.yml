name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        
    - name: Install Backend Dependencies
      run: |
        cd backend
        npm install
        
    - name: Install Frontend Dependencies
      run: |
        cd frontend
        npm install
        
    - name: Run Backend Tests
      run: |
        cd backend
        npm test
        
    - name: Run Frontend Tests
      run: |
        cd frontend
        npm test
        
    - name: Build Frontend
      run: |
        cd frontend
        npm run build
        
    - name: Upload Frontend Build
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/